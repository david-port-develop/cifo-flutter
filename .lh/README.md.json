{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1760009381543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760009495398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,10 @@\n üöÄ C√≥mo Ejecutar\n Requisitos:\n \n     Dart SDK instalado\n-\n     Editor de c√≥digo (VS Code recomendado)\n+    Ejecutar \"dart pub get\" en el directorio de darts para incorporar la libreria antes de ejecutar el ejercico del 9 de octubre  \n \n Ejecuci√≥n:\n bash\n \n"
                },
                {
                    "date": 1760009648967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,17 +115,8 @@\n     Feedback inmediato al usuario\n \n     Experiencia de usuario mejorada\n \n-üìÅ Estructura del Proyecto\n-text\n-\n-ejercicios_dart/\n-‚îú‚îÄ‚îÄ ejercicios_7_oct.dart    # 40 ejercicios de fundamentos\n-‚îú‚îÄ‚îÄ ejercicios_8_oct.dart    # 15 ejercicios de controles de flujo\n-‚îú‚îÄ‚îÄ ejercicios_9_oct.dart    # 20 funciones con men√∫ interactivo\n-‚îî‚îÄ‚îÄ README.md               # Este archivo\n-\n üí° Metodolog√≠a de Aprendizaje\n \n     D√≠a 1: Fundamentos (sintaxis, estructuras b√°sicas)\n \n"
                },
                {
                    "date": 1760009692045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,7 +124,5 @@\n \n     D√≠a 3: Funciones (modularizaci√≥n, reutilizaci√≥n)\n \n Cada d√≠a construye sobre los conceptos del anterior, creando una progresi√≥n de aprendizaje natural.\n-üë®‚Äçüíª Autor\n-\n-Ejercicios de pr√°ctica en Dart - Progresi√≥n de aprendizaje de 3 d√≠as\n\\ No newline at end of file\n+üë®‚Äçüíª Autor David Elisava Profesor Chema\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760269441306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +1,76 @@\n-Ejercicios de Dart - Octubre 2025\n+# Ejercicios de Dart - Octubre 2025\n \n-Este repositorio contiene una colecci√≥n completa de ejercicios en Dart organizados por d√≠as, dise√±ados para practicar desde conceptos b√°sicos hasta funciones avanzadas.\n-üìÖ Ejercicios 7 de Octubre - Fundamentos\n+**Curso:** Flutter en CIFO La Violeta  \n+**Alumno:** David Port  \n+**Profesor:** Chema  \n \n-Temas: Condicionales, Bucles y Listas\n-Caracter√≠sticas:\n+Este repositorio contiene una colecci√≥n completa de ejercicios en Dart organizados por d√≠as, dise√±ados para practicar desde conceptos b√°sicos hasta programaci√≥n as√≠ncrona y manejo de errores.\n \n-    40 ejercicios organizados en 4 bloques\n+## üìÖ Ejercicios Disponibles\n \n-    Validaci√≥n robusta de entradas del usuario\n+- **7 de Octubre:** Fundamentos - Condicionales, Bucles y Listas\n+- **8 de Octubre:** Controles de Flujo - Condicionales Avanzados y Bucles  \n+- **9 de Octubre:** Funciones - Modularizaci√≥n y Reutilizaci√≥n\n+- **10 de Octubre:** Funciones Avanzadas - Async/Await y Manejo de Errores\n \n-    Manejo de errores con try-catch\n+## üöÄ C√≥mo Ejecutar\n \n-    Uso de while para validaci√≥n hasta entrada correcta\n+### Requisitos:\n+- Dart SDK instalado\n+- Editor de c√≥digo (VS Code recomendado)\n \n-    Ejercicios interactivos con stdin.readLineSync()\n+### Estructura del Proyecto:\n+```\n+darts/\n+‚îú‚îÄ‚îÄ pubspec.yaml\n+‚îú‚îÄ‚îÄ funciones_comunes.dart\n+‚îú‚îÄ‚îÄ ejercicios_7_oct.dart\n+‚îú‚îÄ‚îÄ ejercicios_8_oct.dart\n+‚îú‚îÄ‚îÄ ejercicios_9_oct.dart\n+‚îú‚îÄ‚îÄ ejercicios_10_oct.dart\n+‚îî‚îÄ‚îÄ README.md\n+```\n \n-Funciones de Validaci√≥n Incluidas:\n+### Ejecuci√≥n:\n+```bash\n+# Instalar dependencias\n+dart pub get\n \n-    pedirNumero() - Valida n√∫meros enteros\n+# Instalar dependencias\n+dart pub get\n \n-    pedirDouble() - Valida n√∫meros decimales\n+# Ejecutar ejercicios (usar comillas por los espacios)\n+dart \"ejercicios 7 oct.dart\"\n+dart \"ejercicios 8 oct.dart\"\n+dart \"ejercicios 9 oct.dart\"\n+dart \"ejercicios 10 oct.dart\"\n \n-    pedirTexto() - Valida texto no vac√≠o\n+# Alternativa en sistemas Unix/Linux/Mac:\n+dart ejercicios\\ 7\\ oct.dart\n+dart ejercicios\\ 8\\ oct.dart  \n+dart ejercicios\\ 9\\ oct.dart\n+dart ejercicios\\ 10\\ oct.dart\n \n-    pedirLetra() - Valida una sola letra\n+## üõ†Ô∏è Caracter√≠sticas T√©cnicas\n \n-üìÖ Ejercicios 8 de Octubre - Controles de Flujo\n+### M√≥dulo de Funciones Comunes:\n+- Validaci√≥n robusta de entradas num√©ricas y de texto\n+- Soporte para formato decimal europeo (coma como separador)\n+- Funciones de formateo profesional de n√∫meros\n+- Reutilizaci√≥n de c√≥digo entre todos los ejercicios\n \n-Temas: Condicionales Avanzados y Bucles\n-Estructura:\n+### Manejo de Errores:\n+- Validaci√≥n en tiempo de ejecuci√≥n\n+- Mensajes de error descriptivos\n+- Recuperaci√≥n graceful de fallos\n+- Excepciones espec√≠ficas por tipo de error\n \n-    15 ejercicios pr√°cticos\n+### Programaci√≥n As√≠ncrona:\n+- Simulaci√≥n de operaciones de larga duraci√≥n\n+- Coordinaci√≥n de m√∫ltiples tareas async\n+- Manejo de errores en operaciones as√≠ncronas\n+- Flujos de ejecuci√≥n controlados\n \n-    Bloque 1: Condicionales (if/else if, switch)\n+---\n \n-    Bloque 2: Bucles (for, for-in, while, do-while)\n-\n-    Explicaci√≥n de una l√≠nea despu√©s de cada ejercicio\n-\n-Ejercicios Destacados:\n-\n-    Clasificaci√≥n de edades y notas\n-\n-    Men√∫ de operaciones matem√°ticas\n-\n-    Juego de adivinanza con contador de intentos\n-\n-    Validaci√≥n de confirmaci√≥n de salida\n-\n-üìÖ Ejercicios 9 de Octubre - Funciones\n-\n-Temas: Funciones y Modularizaci√≥n\n-Contenido:\n-\n-    20 funciones organizadas en 2 bloques\n-\n-    Bloque 1: Funciones b√°sicas (matem√°ticas, strings, listas)\n-\n-    Bloque 2: Retos combinados (aplicaciones pr√°cticas)\n-\n-    Men√∫ interactivo para probar todas las funciones\n-\n-Funciones Implementadas:\n-\n-    C√°lculos matem√°ticos (factorial, IMC, conversiones)\n-\n-    Manipulaci√≥n de strings (vocales, pal√≠ndromos)\n-\n\\ No newline at end of file\n-    Procesamiento de listas (filtrado, b√∫squeda, promedios)\n-\n-    Validaciones y utilidades varias (conversi√≥n de decimales al formato europeo)\n-\n-üöÄ C√≥mo Ejecutar\n-Requisitos:\n-\n-    Dart SDK instalado\n-    Editor de c√≥digo (VS Code recomendado)\n-    Ejecutar \"dart pub get\" en el directorio de darts para incorporar la libreria antes de ejecutar el ejercico del 9 de octubre  \n-\n-Ejecuci√≥n:\n-bash\n-\n-# Para cada archivo de ejercicios:\n-dart \"nombre del archivo.dart\"\n-\n-üõ†Ô∏è Caracter√≠sticas T√©cnicas\n-Validaci√≥n de Entradas:\n-\n-    Uso de while para persistir hasta entrada v√°lida\n-\n-    Manejo de errores con try-catch\n-\n-    Mensajes de error descriptivos\n-\n-    Validaci√≥n de rangos y formatos\n-\n-Organizaci√≥n del C√≥digo:\n-\n-    C√≥digo modular y reutilizable\n-\n-    Funciones con responsabilidad √∫nica\n-\n-    Comentarios explicativos\n-\n-    Estructura clara y mantenible\n-\n-Interactividad:\n-\n-    Men√∫s navegables\n-\n-    Entradas validadas en tiempo real\n-\n-    Feedback inmediato al usuario\n-\n-    Experiencia de usuario mejorada\n-\n-üí° Metodolog√≠a de Aprendizaje\n-\n-    D√≠a 1: Fundamentos (sintaxis, estructuras b√°sicas)\n-\n-    D√≠a 2: Controles de flujo (l√≥gica program√°tica)\n-\n-    D√≠a 3: Funciones (modularizaci√≥n, reutilizaci√≥n)\n-\n-Cada d√≠a construye sobre los conceptos del anterior, creando una progresi√≥n de aprendizaje natural.\n-üë®‚Äçüíª Autor David Elisava Profesor Chema\n+**¬°Proyecto de aprendizaje completo de Dart para el curso de Flutter!** üéØ\n\\ No newline at end of file\n"
                }
            ],
            "date": 1760009381543,
            "name": "Commit-0",
            "content": "Ejercicios de Dart - Octubre 2025\n\nEste repositorio contiene una colecci√≥n completa de ejercicios en Dart organizados por d√≠as, dise√±ados para practicar desde conceptos b√°sicos hasta funciones avanzadas.\nüìÖ Ejercicios 7 de Octubre - Fundamentos\n\nTemas: Condicionales, Bucles y Listas\nCaracter√≠sticas:\n\n    40 ejercicios organizados en 4 bloques\n\n    Validaci√≥n robusta de entradas del usuario\n\n    Manejo de errores con try-catch\n\n    Uso de while para validaci√≥n hasta entrada correcta\n\n    Ejercicios interactivos con stdin.readLineSync()\n\nFunciones de Validaci√≥n Incluidas:\n\n    pedirNumero() - Valida n√∫meros enteros\n\n    pedirDouble() - Valida n√∫meros decimales\n\n    pedirTexto() - Valida texto no vac√≠o\n\n    pedirLetra() - Valida una sola letra\n\nüìÖ Ejercicios 8 de Octubre - Controles de Flujo\n\nTemas: Condicionales Avanzados y Bucles\nEstructura:\n\n    15 ejercicios pr√°cticos\n\n    Bloque 1: Condicionales (if/else if, switch)\n\n    Bloque 2: Bucles (for, for-in, while, do-while)\n\n    Explicaci√≥n de una l√≠nea despu√©s de cada ejercicio\n\nEjercicios Destacados:\n\n    Clasificaci√≥n de edades y notas\n\n    Men√∫ de operaciones matem√°ticas\n\n    Juego de adivinanza con contador de intentos\n\n    Validaci√≥n de confirmaci√≥n de salida\n\nüìÖ Ejercicios 9 de Octubre - Funciones\n\nTemas: Funciones y Modularizaci√≥n\nContenido:\n\n    20 funciones organizadas en 2 bloques\n\n    Bloque 1: Funciones b√°sicas (matem√°ticas, strings, listas)\n\n    Bloque 2: Retos combinados (aplicaciones pr√°cticas)\n\n    Men√∫ interactivo para probar todas las funciones\n\nFunciones Implementadas:\n\n    C√°lculos matem√°ticos (factorial, IMC, conversiones)\n\n    Manipulaci√≥n de strings (vocales, pal√≠ndromos)\n\n    Procesamiento de listas (filtrado, b√∫squeda, promedios)\n\n    Validaciones y utilidades varias (conversi√≥n de decimales al formato europeo)\n\nüöÄ C√≥mo Ejecutar\nRequisitos:\n\n    Dart SDK instalado\n\n    Editor de c√≥digo (VS Code recomendado)\n\nEjecuci√≥n:\nbash\n\n# Para cada archivo de ejercicios:\ndart \"nombre del archivo.dart\"\n\nüõ†Ô∏è Caracter√≠sticas T√©cnicas\nValidaci√≥n de Entradas:\n\n    Uso de while para persistir hasta entrada v√°lida\n\n    Manejo de errores con try-catch\n\n    Mensajes de error descriptivos\n\n    Validaci√≥n de rangos y formatos\n\nOrganizaci√≥n del C√≥digo:\n\n    C√≥digo modular y reutilizable\n\n    Funciones con responsabilidad √∫nica\n\n    Comentarios explicativos\n\n    Estructura clara y mantenible\n\nInteractividad:\n\n    Men√∫s navegables\n\n    Entradas validadas en tiempo real\n\n    Feedback inmediato al usuario\n\n    Experiencia de usuario mejorada\n\nüìÅ Estructura del Proyecto\ntext\n\nejercicios_dart/\n‚îú‚îÄ‚îÄ ejercicios_7_oct.dart    # 40 ejercicios de fundamentos\n‚îú‚îÄ‚îÄ ejercicios_8_oct.dart    # 15 ejercicios de controles de flujo\n‚îú‚îÄ‚îÄ ejercicios_9_oct.dart    # 20 funciones con men√∫ interactivo\n‚îî‚îÄ‚îÄ README.md               # Este archivo\n\nüí° Metodolog√≠a de Aprendizaje\n\n    D√≠a 1: Fundamentos (sintaxis, estructuras b√°sicas)\n\n    D√≠a 2: Controles de flujo (l√≥gica program√°tica)\n\n    D√≠a 3: Funciones (modularizaci√≥n, reutilizaci√≥n)\n\nCada d√≠a construye sobre los conceptos del anterior, creando una progresi√≥n de aprendizaje natural.\nüë®‚Äçüíª Autor\n\nEjercicios de pr√°ctica en Dart - Progresi√≥n de aprendizaje de 3 d√≠as"
        }
    ]
}