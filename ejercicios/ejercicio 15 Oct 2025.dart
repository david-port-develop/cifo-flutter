// =============================================
// BLOQUE 1: Jerarqu√≠a Animal
// =============================================

// 1. Clase base Animal
class Animal {
  String nombre;
  int _edad = 0; // Campo privado para el ejercicio 6

  Animal(this.nombre);

  void mover() {
    print("El animal se mueve");
  }

  // Getter y setter para edad (ejercicio 6)
  int get edad => _edad;
  set edad(int e) {
    if (e >= 0) _edad = e;
  }
}
// L√≥gica: Clase base con constructor, m√©todo b√°sico y encapsulaci√≥n con campo privado

// 2. Subclases Mammal, Bird y Fish
class Mammal extends Animal {
  Mammal(super.nombre);

  @override
  void mover() => print("$nombre camina sobre la tierra");
}
// L√≥gica: Herencia simple con redefinici√≥n de m√©todo usando override

class Bird extends Animal {
  Bird(super.nombre);

  @override
  void mover() => print("$nombre vuela por el aire");
}
// L√≥gica: Sobrescritura de m√©todo para comportamiento espec√≠fico de ave

class Fish extends Animal {
  Fish(super.nombre);

  @override
  void mover() => print("$nombre nada en el agua");
}
// L√≥gica: Especializaci√≥n de comportamiento mediante herencia

// 3. Constructores con super() - Ya implementado en las clases anteriores
// L√≥gica: Uso de super() en constructores para inicializaci√≥n de clase padre

// 4. Mixins para comportamientos
mixin Walk {
  void caminar() => print(
      "${this is Animal ? (this as Animal).nombre : 'Este ser'} est√° caminando");
}
// L√≥gica: Mixin para agregar comportamiento de caminar reusable

mixin Swim {
  void nadar() => print(
      "${this is Animal ? (this as Animal).nombre : 'Este ser'} est√° nadando");
}
// L√≥gica: Mixin para comportamiento de nataci√≥n independiente

mixin Fly {
  void volar() => print(
      "${this is Animal ? (this as Animal).nombre : 'Este ser'} est√° volando");
}
// L√≥gica: Mixin para capacidad de vuelo modular

// Clases que combinan herencia y mixins
class Bat extends Mammal with Walk, Fly {
  Bat(super.nombre);
}
// L√≥gica: Combinaci√≥n de herencia con m√∫ltiples mixins para capacidades extendidas

class Dolphin extends Mammal with Swim {
  Dolphin(super.nombre);
}
// L√≥gica: Herencia simple con un mixin espec√≠fico para comportamiento acu√°tico

// 5. Comportamientos m√∫ltiples
class Duck extends Bird with Walk, Swim, Fly {
  Duck(super.nombre);
}
// L√≥gica: Combinaci√≥n m√°xima de mixins para objeto con m√∫ltiples capacidades

// 6. Encapsulaci√≥n - Ya implementada en clase Animal (campo _edad)
// L√≥gica: Uso de campo privado _edad con getter/setter para control de acceso

// 7. Polimorfismo
class Cat extends Mammal with Walk {
  Cat(super.nombre);
}
// L√≥gica: Clase concreta para demostraci√≥n de polimorfismo

class Shark extends Fish with Swim {
  Shark(super.nombre);
}
// L√≥gica: Especializaci√≥n de pez con capacidad de nataci√≥n

// 8. Sobrescritura de toString()
class FlyingFish extends Fish with Swim, Fly {
  FlyingFish(super.nombre);

  @override
  String toString() => "Soy un $nombre que puede nadar y volar";
}
// L√≥gica: Redefinici√≥n de toString para descripci√≥n personalizada del objeto

// 9. Clase abstracta Animal (versi√≥n abstracta)
abstract class AnimalAbstracto {
  String nombre;
  AnimalAbstracto(this.nombre);

  void mover(); // M√©todo abstracto sin implementaci√≥n
}
// L√≥gica: Clase abstracta que define interfaz sin implementaci√≥n concreta

// 10. Ejercicio integrador - Zool√≥gico
void ejercicioIntegradorZoologico() {
  print('\n--- ZOOL√ìGICO VIRTUAL ---');

  // Crear instancias de diferentes animales
  List<Animal> animales = [
    Cat('Whiskers'),
    Dolphin('Flipper'),
    Duck('Donald'),
    Bat('Bruce'),
    Shark('Jaws'),
    FlyingFish('Nemo Volador')
  ];

  // Mostrar capacidades de cada animal
  for (var animal in animales) {
    print('\n--- $animal ---');
    animal.mover();

    // Verificar capacidades usando mixins
    if (animal is Cat) animal.caminar();
    if (animal is Dolphin) animal.nadar();
    if (animal is Duck) animal.volar();

    // Mostrar descripci√≥n si tiene toString sobreescrito
    if (animal is FlyingFish) print(animal.toString());
  }
}
// L√≥gica: Demostraci√≥n completa de POO con polimorfismo, mixins y verificaci√≥n de tipos

// =============================================
// BLOQUE 2: Ejemplos alternativos
// =============================================

// 1. Clase base con constructor y atributos
class AnimalAlternativo {
  String nombre;
  String tipo;

  AnimalAlternativo(this.nombre, this.tipo);

  void descripcion() {
    print('$nombre es un animal de tipo $tipo');
  }
}
// L√≥gica: Clase simple con constructor y m√©todo de descripci√≥n b√°sica

// 2. Subclases con comportamiento espec√≠fico
class Perro extends AnimalAlternativo {
  String raza;

  Perro(String nombre, this.raza) : super(nombre, 'mam√≠fero');

  @override
  void descripcion() {
    print('$nombre es un perro de raza $raza');
  }
}
// L√≥gica: Herencia con atributo adicional y sobrescritura de m√©todo

// 3. Uso de getters y setters
class Ave {
  double _alturaVuelo = 0;

  double get alturaVuelo => _alturaVuelo;
  set alturaVuelo(double valor) {
    if (valor >= 0) _alturaVuelo = valor;
  }
}
// L√≥gica: Encapsulaci√≥n estricta con validaci√≥n en setter

// 4. Herencia + m√©todo extra
class Pez extends AnimalAlternativo {
  Pez(String nombre) : super(nombre, 'pez');

  void nadar() => print("$nombre est√° nadando.");
}
// L√≥gica: Herencia con m√©todo adicional espec√≠fico de la subclase

// 5. Constructores nombrados
class Gato {
  String nombre;
  int edad;

  Gato(this.nombre, this.edad);

  Gato.bebe(this.nombre) : edad = 0;
}
// L√≥gica: M√∫ltiples constructores para diferentes casos de inicializaci√≥n

// 6. Clase abstracta y herencia
abstract class Vehiculo {
  void mover();
}
// L√≥gica: Definici√≥n de interfaz abstracta sin implementaci√≥n

class Coche extends Vehiculo {
  @override
  void mover() => print("El coche se desplaza por la carretera");
}
// L√≥gica: Implementaci√≥n concreta de m√©todo abstracto

class Avion extends Vehiculo {
  @override
  void mover() => print("El avi√≥n vuela por el cielo");
}
// L√≥gica: Otra implementaci√≥n con comportamiento espec√≠fico diferente

// 7. Polimorfismo
void demostrarPolimorfismo() {
  List<Vehiculo> vehiculos = [Coche(), Avion()];

  for (var vehiculo in vehiculos) {
    vehiculo.mover();
  }
}
// L√≥gica: Uso de polimorfismo para tratar objetos diferentes de manera uniforme

// 8. Composici√≥n (objeto dentro de otro)
class Corazon {
  void latir() => print("‚ù§Ô∏è Latido...");
}
// L√≥gica: Clase componente con funcionalidad espec√≠fica

class Persona {
  Corazon corazon = Corazon();

  void vivir() => corazon.latir();
}
// L√≥gica: Composici√≥n - Persona contiene un Corazon y delega funcionalidad

// 9. Mixins alternativos
mixin Caminar {
  void caminar() => print("Caminando...");
}

mixin Volar {
  void volar() => print("Volando...");
}

mixin Nadar {
  void nadar() => print("Nadando...");
}

class Pinguino with Caminar, Nadar {}
// L√≥gica: Combinaci√≥n espec√≠fica de mixins para ping√ºino

class Murcielago with Caminar, Volar {}
// L√≥gica: Otra combinaci√≥n de mixins para murci√©lago

class Pato with Caminar, Volar, Nadar {}
// L√≥gica: Combinaci√≥n completa de tres mixins para pato

// 10. Ejercicio integrador - Zool√≥gico alternativo
abstract class AnimalZoologico {
  String nombre;
  AnimalZoologico(this.nombre);
  void mover();
}

class Mamifero extends AnimalZoologico {
  Mamifero(String nombre) : super(nombre);
  @override
  void mover() => print("$nombre se mueve como mam√≠fero");
}

class AveZoologico extends AnimalZoologico {
  AveZoologico(String nombre) : super(nombre);
  @override
  void mover() => print("$nombre se mueve como ave");
}

class PezZoologico extends AnimalZoologico {
  PezZoologico(String nombre) : super(nombre);
  @override
  void mover() => print("$nombre se mueve como pez");
}

class GatoZoologico extends Mamifero with Caminar {
  GatoZoologico(String nombre) : super(nombre);
}

class DelfinZoologico extends Mamifero with Nadar {
  DelfinZoologico(String nombre) : super(nombre);
}

class PatoZoologico extends AveZoologico with Caminar, Volar, Nadar {
  PatoZoologico(String nombre) : super(nombre);
}

class TiburonZoologico extends PezZoologico with Nadar {
  TiburonZoologico(String nombre) : super(nombre);
}

void ejercicioIntegradorCompleto() {
  print('\n--- ZOOL√ìGICO COMPLETO ---');

  List<AnimalZoologico> animales = [
    GatoZoologico('Bigotes'),
    DelfinZoologico('Flipper'),
    PatoZoologico('Lucas'),
    TiburonZoologico('Tibur√≥ncin')
  ];

  for (var animal in animales) {
    print('\nüîπ ${animal.nombre}:');
    animal.mover();

    if (animal is GatoZoologico) {
      animal.caminar();
      print("‚úÖ ${animal.nombre} puede caminar");
    }
    if (animal is PatoZoologico) {
      animal.volar();
      print("‚úÖ ${animal.nombre} puede volar");
    }
    if (animal is DelfinZoologico) {
      animal.nadar();
      print("‚úÖ ${animal.nombre} puede nadar");
    }
  }
}

// =============================================
// FUNCI√ìN PRINCIPAL
// =============================================

void main() {
  print('=== EJERCICIOS 15-OCT-2025 - PROGRAMACI√ìN ORIENTADA A OBJETOS ===');

  // Bloque 1: Jerarqu√≠a Animal
  print('\n--- BLOQUE 1: JERARQU√çA ANIMAL ---');

  // Ejercicio 3: Crear instancias y probar movimiento
  Bird pajaro = Bird('Gorri√≥n');
  Fish pez = Fish('Salm√≥n');
  pajaro.mover();
  pez.mover();

  // Ejercicio 5: Pato con m√∫ltiples comportamientos
  Duck pato = Duck('Pato Lucas');
  print('\n--- Pato con m√∫ltiples comportamientos ---');
  pato.mover();
  pato.caminar();
  pato.nadar();
  pato.volar();

  // Ejercicio 6: Encapsulaci√≥n
  Animal animal = Animal('Gen√©rico');
  animal.edad = 5;
  print('Edad del animal: ${animal.edad}');
  animal.edad = -3; // No deber√≠a cambiar
  print('Edad despu√©s de intentar asignar -3: ${animal.edad}');

  // Ejercicio 10: Ejercicio integrador
  ejercicioIntegradorZoologico();

  // Bloque 2: Ejemplos alternativos
  print('\n--- BLOQUE 2: EJEMPLOS ALTERNATIVOS ---');

  // Ejercicio 2: Perro con descripci√≥n
  Perro perro = Perro('Rex', 'Labrador');
  perro.descripcion();

  // Ejercicio 4: Pez con m√©todo adicional
  Pez pezAlternativo = Pez('Nemo');
  pezAlternativo.descripcion();
  pezAlternativo.nadar();

  // Ejercicio 5: Constructores nombrados
  Gato gatoAdulto = Gato('Mimi', 3);
  Gato gatoBebe = Gato.bebe('Kitty');
  print('Gato adulto: ${gatoAdulto.nombre}, ${gatoAdulto.edad} a√±os');
  print('Gato beb√©: ${gatoBebe.nombre}, ${gatoBebe.edad} a√±os');

  // Ejercicio 7: Polimorfismo con veh√≠culos
  print('\n--- Polimorfismo con veh√≠culos ---');
  demostrarPolimorfismo();

  // Ejercicio 8: Composici√≥n
  print('\n--- Composici√≥n ---');
  Persona persona = Persona();
  persona.vivir();

  // Ejercicio 9: Mixins alternativos
  print('\n--- Mixins alternativos ---');
  Pato patoAlternativo = Pato();
  patoAlternativo.caminar();
  patoAlternativo.volar();
  patoAlternativo.nadar();

  // Ejercicio 10: Ejercicio integrador completo
  ejercicioIntegradorCompleto();

  print('\n=== TODOS LOS EJERCICIOS DE POO COMPLETADOS ===');
}
